name: OBS_Mylenti

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install core Python packages
        run: pip install pyinstaller flask flask-cors requests

      - name: Clone VietVoice
        run: git clone https://github.com/nguyenvulebinh/VietVoice-TTS.git

      - name: Install VietVoice locally
        run: pip install ./VietVoice-TTS

      - name: Install Bun (Windows)
        if: runner.os == 'Windows'
        run: |
          iwr https://bun.sh/install.ps1 -UseBasicParsing | iex
          echo "$env:USERPROFILE\.bun\bin" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH

      - name: Install Bun (Unix)
        if: runner.os != 'Windows'
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Verify Bun install
        run: |
          bun --version
          which bun || echo "bun not found"

      - name: Install frontend dependencies
        run: bun install

      - name: Install nexe locally
        run: bun i nexe -g

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0.5.23
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: Generate SHA256 checksums
        run: |
          mkdir -p checksums
          find src-tauri/target/release/bundle -type f \( -name "*.msi" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.dmg" \) \
            -exec sha256sum {} \; > checksums/sha256-${{ runner.os }}.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/**/*.msi
            src-tauri/target/release/bundle/**/*.AppImage
            src-tauri/target/release/bundle/**/*.deb
            src-tauri/target/release/bundle/**/*.rpm
            src-tauri/target/release/bundle/**/*.dmg
            src-tauri/target/release/bundle/**/*.sig
            bin/donate_voice-*
            bin/node_server-*
            checksums/sha256-${{ runner.os }}.txt

      - name: Format SHA256 as Markdown table
        id: format
        run: |
          echo "table<<EOF" >> $GITHUB_OUTPUT
          echo "| File | SHA256 |" >> $GITHUB_OUTPUT
          echo "|------|--------|" >> $GITHUB_OUTPUT
          awk '{printf "| %s | %s |\n", $2, $1}' checksums/sha256-${{ runner.os }}.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          configuration: .github/changelog-config.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read .sig files with validation
        id: sigs
        run: |
          VERSION="${{ github.ref_name }}"
          WIN_SIG=$(find downloads -name "Mylenti_${VERSION}_x64_en-US.msi.sig" | head -n 1)
          MAC_SIG=$(find downloads -name "Mylenti_${VERSION}_en-US.dmg.sig" | head -n 1)
          LINUX_SIG=$(find downloads -name "Mylenti_${VERSION}_en-US.AppImage.sig" | head -n 1)

          if [ -z "$WIN_SIG" ] || [ -z "$MAC_SIG" ] || [ -z "$LINUX_SIG" ]; then
            echo "‚ùå Thi·∫øu file ch·ªØ k√Ω .sig. Ki·ªÉm tra l·∫°i t√™n file ho·∫∑c qu√° tr√¨nh build."
            exit 1
          fi

          echo "windows_sig=$(cat "$WIN_SIG")" >> $GITHUB_OUTPUT
          echo "macos_sig=$(cat "$MAC_SIG")" >> $GITHUB_OUTPUT
          echo "linux_sig=$(cat "$LINUX_SIG")" >> $GITHUB_OUTPUT

      - name: Generate latest.json
        run: |
          echo '{
            "version": "'"${{ github.ref_name }}"'",
            "notes": '"$(echo "${{ steps.changelog.outputs.changelog }}" | jq -Rs .)"',
            "pub_date": "'"$(date -u +"%Y-%m-%dT%H:%M:%SZ")"'",
            "platforms": {
              "windows": {
                "signature": "'"${{ steps.sigs.outputs.windows_sig }}"'",
                "url": "https://github.com/khoiw04/OBS_Mylenti/releases/download/${{ github.ref_name }}/Mylenti_${{ github.ref_name }}_x64_en-US.msi"
              },
              "macos": {
                "signature": "'"${{ steps.sigs.outputs.macos_sig }}"'",
                "url": "https://github.com/khoiw04/OBS_Mylenti/releases/download/${{ github.ref_name }}/Mylenti_${{ github.ref_name }}_en-US.dmg"
              },
              "linux": {
                "signature": "'"${{ steps.sigs.outputs.linux_sig }}"'",
                "url": "https://github.com/khoiw04/OBS_Mylenti/releases/download/${{ github.ref_name }}/Mylenti_${{ github.ref_name }}_en-US.AppImage"
              }
            }
          }' > latest.json

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ${{ steps.changelog.outputs.changelog }}

            ## üîê SHA256 Checksums
            ${{ steps.format.outputs.table }}
          files: |
            src-tauri/target/release/bundle/**/*.sig
            latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}